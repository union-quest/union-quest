{
  "address": "0x631C2dC1236760172Dd9c2A6d6311Ab489D8291E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_marketRegistry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_unionToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_underlyingToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "image",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "stake",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "toolIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "toolBonuses",
              "type": "uint256[]"
            }
          ],
          "indexed": false,
          "internalType": "struct UnionQuest.ItemType",
          "name": "_itemType",
          "type": "tuple"
        }
      ],
      "name": "AddItemType",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "inputIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "inputQuantities",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "output",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct UnionQuest.Recipe",
          "name": "_recipe",
          "type": "tuple"
        }
      ],
      "name": "AddRecipe",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "IncreaseSkill",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "x",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "y",
          "type": "int256"
        }
      ],
      "name": "Move",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "image",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "stake",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "toolIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "toolBonuses",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct UnionQuest.ItemType[]",
          "name": "_itemTypes",
          "type": "tuple[]"
        }
      ],
      "name": "addItemTypes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "inputIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "inputQuantities",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "output",
              "type": "uint256"
            }
          ],
          "internalType": "struct UnionQuest.Recipe[]",
          "name": "_recipes",
          "type": "tuple[]"
        }
      ],
      "name": "addRecipes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "buy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "recipeId",
          "type": "uint256"
        }
      ],
      "name": "craft",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBorrowerAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakerBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isMember",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketRegistry",
      "outputs": [
        {
          "internalType": "contract IMarketRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "x",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "y",
          "type": "int256"
        }
      ],
      "name": "move",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "sell",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uToken",
      "outputs": [
        {
          "internalType": "contract IUToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlyingToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unionToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower_",
          "type": "address"
        }
      ],
      "name": "updateTrust",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "userManager",
      "outputs": [
        {
          "internalType": "contract IUserManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6af5e1bb8cb47a161a2dc9af66656a6708c76880a3eac41c5e9edc383ec424ad",
  "receipt": {
    "to": null,
    "from": "0xb19BC46C52A1352A071fe2389503B6FE1ABD50Ff",
    "contractAddress": "0x631C2dC1236760172Dd9c2A6d6311Ab489D8291E",
    "transactionIndex": 0,
    "gasUsed": "3125847",
    "logsBloom": "0x
    "blockHash": "0xa6f9b11aa63bfad4bc07137d259d44c8c4585e21af7a274999e9c0f840d17871",
    "transactionHash": "0x6af5e1bb8cb47a161a2dc9af66656a6708c76880a3eac41c5e9edc383ec424ad",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 31944663,
        "transactionHash": "0x6af5e1bb8cb47a161a2dc9af66656a6708c76880a3eac41c5e9edc383ec424ad",
        "address": "0x631C2dC1236760172Dd9c2A6d6311Ab489D8291E",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b19bc46c52a1352a071fe2389503b6fe1abd50ff"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xa6f9b11aa63bfad4bc07137d259d44c8c4585e21af7a274999e9c0f840d17871"
      }
    ],
    "blockNumber": 31944663,
    "cumulativeGasUsed": "3125847",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x15B12b8dB6665B31E15Da26275fD54590f2E989c",
    "0x08AF898e65493D8212c8981FAdF60Ff023A91150",
    "0x4f96fe3b7a6cf9725f59d353f723c1bdb64ca6aa"
  ],
  "numDeployments": 1,
  "solcInputHash": "473933ac452b3b751986bcb2618dec23",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_unionToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_underlyingToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"toolIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"toolBonuses\",\"type\":\"uint256[]\"}],\"indexed\":false,\"internalType\":\"struct UnionQuest.ItemType\",\"name\":\"_itemType\",\"type\":\"tuple\"}],\"name\":\"AddItemType\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"inputIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"inputQuantities\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"output\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct UnionQuest.Recipe\",\"name\":\"_recipe\",\"type\":\"tuple\"}],\"name\":\"AddRecipe\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"IncreaseSkill\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"y\",\"type\":\"int256\"}],\"name\":\"Move\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"toolIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"toolBonuses\",\"type\":\"uint256[]\"}],\"internalType\":\"struct UnionQuest.ItemType[]\",\"name\":\"_itemTypes\",\"type\":\"tuple[]\"}],\"name\":\"addItemTypes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"inputIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"inputQuantities\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"output\",\"type\":\"uint256\"}],\"internalType\":\"struct UnionQuest.Recipe[]\",\"name\":\"_recipes\",\"type\":\"tuple[]\"}],\"name\":\"addRecipes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"recipeId\",\"type\":\"uint256\"}],\"name\":\"craft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBorrowerAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakerBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketRegistry\",\"outputs\":[{\"internalType\":\"contract IMarketRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"y\",\"type\":\"int256\"}],\"name\":\"move\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uToken\",\"outputs\":[{\"internalType\":\"contract IUToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unionToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower_\",\"type\":\"address\"}],\"name\":\"updateTrust\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userManager\",\"outputs\":[{\"internalType\":\"contract IUserManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"Returns the amount of tokens of token type `id` owned by `account`. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length.\"},\"getBorrowerAddresses()\":{\"details\":\"Get all the addresses the user vouched for\",\"returns\":{\"_0\":\"List of ddresses the user vouched for\"}},\"getStakerBalance()\":{\"details\":\"Get user's staking amount\",\"returns\":{\"_0\":\"Staking amount (in wei)\"}},\"isApprovedForAll(address,address)\":{\"details\":\"Returns true if `operator` is approved to transfer ``account``'s tokens. See {setApprovalForAll}.\"},\"isMember()\":{\"details\":\"Return member's status\",\"returns\":{\"_0\":\"Member's status\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. Emits a {TransferBatch} event. Requirements: - `ids` and `amounts` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"Transfers `amount` tokens of token type `id` from `from` to `to`. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `amount`. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`, Emits an {ApprovalForAll} event. Requirements: - `operator` cannot be the caller.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"uri(uint256)\":{\"details\":\"Returns the URI for token type `id`. If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by clients with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/UnionQuest/UnionQuest.sol\":\"UnionQuest\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xc743d2235b8854045c308d2f8f1ed88efed6c2bebf2b7a4a51ea42480c82e566\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@unioncredit/v1-sdk/contracts/BaseUnionMember.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/IMarketRegistry.sol\\\";\\nimport \\\"./interfaces/IUserManager.sol\\\";\\nimport \\\"./interfaces/IUToken.sol\\\";\\n\\n/**\\n * @title BaseUnionMember Contract\\n * @dev This contract has the basic functions of Union member.\\n */\\nabstract contract BaseUnionMember {\\n    IMarketRegistry public immutable marketRegistry;\\n    IUserManager public immutable userManager;\\n    IUToken public immutable uToken;\\n    IERC20 public immutable unionToken;\\n    IERC20 public immutable underlyingToken;\\n\\n    /**\\n     *  @dev Constructor\\n     *  @param _marketRegistry Union's MarketRegistry contract address\\n     *  @param _unionToken UNION token address\\n     *  @param _underlyingToken Underlying asset address\\n     */\\n    constructor(address _marketRegistry, address _unionToken, address _underlyingToken) {\\n        (address _uToken, address _userManager) = IMarketRegistry(_marketRegistry).tokens(_underlyingToken);\\n        marketRegistry = IMarketRegistry(_marketRegistry);\\n        userManager = IUserManager(_userManager);\\n        uToken = IUToken(_uToken);\\n        unionToken = IERC20(_unionToken);\\n        underlyingToken = IERC20(_underlyingToken);\\n    }\\n\\n    /**\\n     *  @dev Return member's status\\n     *  @return Member's status\\n     */\\n    function isMember() public view returns (bool) {\\n        return userManager.checkIsMember(address(this));\\n    }\\n\\n    /**\\n     *  @dev Register to become a Union member\\n     */\\n    function _registerMember() internal {\\n        uint256 newMemberFee = userManager.newMemberFee();\\n        unionToken.approve(address(userManager), newMemberFee);\\n        userManager.registerMember(address(this));\\n    }\\n}\",\"keccak256\":\"0x5edca2cfbb68648e8f171cf128bc5959ff37459c5490cc18bc921adcae87fbc8\",\"license\":\"MIT\"},\"@unioncredit/v1-sdk/contracts/UnionVoucher.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/IMarketRegistry.sol\\\";\\nimport \\\"./interfaces/IUserManager.sol\\\";\\nimport \\\"./BaseUnionMember.sol\\\";\\n\\n\\n/**\\n * @title UnionVoucher Contract\\n * @dev This contract has all the functions of Union voucher role.\\n */\\nabstract contract UnionVoucher is BaseUnionMember{\\n    /**\\n     *  @dev Get all the addresses the user vouched for\\n     *  @return List of ddresses the user vouched for\\n     */\\n    function getBorrowerAddresses() public view returns (address[] memory) {\\n        return userManager.getBorrowerAddresses(address(this));\\n    }\\n    \\n    /**\\n     *  @dev Get user's staking amount\\n     *  @return Staking amount (in wei)\\n     */\\n    function getStakerBalance() public view returns (uint256) {\\n        return userManager.getStakerBalance(address(this));\\n    }\\n\\n    /**\\n     *  @dev Set the vouching amount for another user\\n     *  @param account Recipient address\\n     *  @param amount Amount to vouch for (in wei)\\n     */\\n    function _updateTrust(address account, uint256 amount) internal {\\n        userManager.updateTrust(account, amount);\\n    }\\n\\n    /**\\n     *  @dev Stop vouching for another one\\n     *  @param staker Voucher's address\\n     *  @param borrower Recipient address\\n     */\\n    function _cancelVouch(address staker, address borrower) internal {\\n        userManager.cancelVouch(staker, borrower);\\n    }\\n\\n    /**\\n     *  @dev Deposit to Union\\n     *  @param amount Amount to stake (in wei)\\n     */\\n    function _stake(uint256 amount) internal {\\n        underlyingToken.approve(address(userManager), amount);\\n        userManager.stake(amount);\\n    }\\n\\n    /**\\n     *  @dev Withdraw from Union\\n     *  @param amount Amount to unstake (in wei)\\n     */\\n    function _unstake(uint256 amount) internal {\\n        userManager.unstake(amount);\\n    }\\n\\n    /**\\n     *  @dev Claim the rewarded UNION tokens\\n     */\\n    function _withdrawRewards() internal {\\n        userManager.withdrawRewards();\\n    }\\n    \\n    /**\\n     *  @dev Write off voucher's bad debt\\n     *  @param borrower Borrower's address\\n     *  @param amount Amount of debt to write off (in wei)\\n     */\\n    function _debtWriteOff(address borrower, uint256 amount) internal {\\n        userManager.debtWriteOff(borrower, amount);\\n    } \\n}\",\"keccak256\":\"0x1d91c673e0cfe9eae25ab50507cdfc8ab732c65dc72b43ebdd3bc08a62e5a4b5\",\"license\":\"MIT\"},\"@unioncredit/v1-sdk/contracts/interfaces/IMarketRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title MarketRegistry Interface\\n * @dev Registering and managing all the lending markets.\\n */\\ninterface IMarketRegistry {\\n    function getUTokens() external view returns (address[] memory);\\n\\n    function getUserManagers() external view returns (address[] memory);\\n\\n    /**\\n     *  @dev Returns the market address of the token\\n     *  @return The market address\\n     */\\n    function tokens(address token) external view returns (address, address);\\n\\n    function createUToken(\\n        address token,\\n        address assetManager,\\n        uint256 originationFee,\\n        uint256 globalMaxLoan,\\n        uint256 maxBorrow,\\n        uint256 minLoan,\\n        uint256 maxLateBlock,\\n        address interestRateModel\\n    ) external returns (address);\\n\\n    function createUserManager(\\n        address assetManager,\\n        address unionToken,\\n        address stakingToken,\\n        address creditLimitModel,\\n        address inflationIndexModel,\\n        address comptroller\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0x2ded003cb76e88e364c7ac892eecfae078726b3b899b7901c2f43c80f461f48d\",\"license\":\"UNLICENSED\"},\"@unioncredit/v1-sdk/contracts/interfaces/IUToken.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n/**\\n *  @title UToken Interface\\n *  @dev Union members can borrow and repay thru this component.\\n */\\ninterface IUToken {\\n    /**\\n     *  @dev Returns the remaining amount that can be borrowed from the market.\\n     *  @return Remaining total amount\\n     */\\n    function getRemainingDebtCeiling() external view returns (uint256);\\n\\n    /**\\n     *  @dev Get the borrowed principle\\n     *  @param account Member address\\n     *  @return Borrowed amount\\n     */\\n    function getBorrowed(address account) external view returns (uint256);\\n\\n    /**\\n     *  @dev Get the last repay block\\n     *  @param account Member address\\n     *  @return Block number\\n     */\\n    function getLastRepay(address account) external view returns (uint256);\\n\\n    /**\\n     *  @dev Get member interest index\\n     *  @param account Member address\\n     *  @return Interest index\\n     */\\n    function getInterestIndex(address account) external view returns (uint256);\\n\\n    /**\\n     *  @dev Check if the member's loan is overdue\\n     *  @param account Member address\\n     *  @return Check result\\n     */\\n    function checkIsOverdue(address account) external view returns (bool);\\n\\n    /**\\n     *  @dev Get the borrowing interest rate per block\\n     *  @return Borrow rate\\n     */\\n    function borrowRatePerBlock() external view returns (uint256);\\n\\n    /**\\n     *  @dev Get the origination fee\\n     *  @param amount Amount to be calculated\\n     *  @return Handling fee\\n     */\\n    function calculatingFee(uint256 amount) external view returns (uint256);\\n\\n    /**\\n     *  @dev Calculating member's borrowed interest\\n     *  @param account Member address\\n     *  @return Interest amount\\n     */\\n    function calculatingInterest(address account) external view returns (uint256);\\n\\n    /**\\n     *  @dev Get a member's current owed balance, including the principle and interest but without updating the user's states.\\n     *  @param account Member address\\n     *  @return Borrowed amount\\n     */\\n    function borrowBalanceView(address account) external view returns (uint256);\\n\\n    /**\\n     *  @dev Change loan origination fee value\\n     *  Accept claims only from the admin\\n     *  @param originationFee_ Fees deducted for each loan transaction\\n     */\\n    function setOriginationFee(uint256 originationFee_) external;\\n\\n    /**\\n     *  @dev Update the market debt ceiling to a fixed amount, for example, 1 billion DAI etc.\\n     *  Accept claims only from the admin\\n     *  @param debtCeiling_ The debt limit for the whole system\\n     */\\n    function setDebtCeiling(uint256 debtCeiling_) external;\\n\\n    /**\\n     *  @dev Update the max loan size\\n     *  Accept claims only from the admin\\n     *  @param maxBorrow_ Max loan amount per user\\n     */\\n    function setMaxBorrow(uint256 maxBorrow_) external;\\n\\n    /**\\n     *  @dev Update the minimum loan size\\n     *  Accept claims only from the admin\\n     *  @param minBorrow_ Minimum loan amount per user\\n     */\\n    function setMinBorrow(uint256 minBorrow_) external;\\n\\n    /**\\n     *  @dev Change loan overdue duration, based on the number of blocks\\n     *  Accept claims only from the admin\\n     *  @param overdueBlocks_ Maximum late repayment block. The number of arrivals is a default\\n     */\\n    function setOverdueBlocks(uint256 overdueBlocks_) external;\\n\\n    /**\\n     *  @dev Change to a different interest rate model\\n     *  Accept claims only from the admin\\n     *  @param newInterestRateModel New interest rate model address\\n     */\\n    function setInterestRateModel(address newInterestRateModel) external;\\n\\n    function setReserveFactor(uint256 reserveFactorMantissa_) external;\\n\\n    function supplyRatePerBlock() external returns (uint256);\\n\\n    function accrueInterest() external returns (bool);\\n\\n    function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n    function mint(uint256 mintAmount) external;\\n\\n    function redeem(uint256 redeemTokens) external;\\n\\n    function redeemUnderlying(uint256 redeemAmount) external;\\n\\n    function addReserves(uint256 addAmount) external;\\n\\n    function removeReserves(address receiver, uint256 reduceAmount) external;\\n\\n    /**\\n     *  @dev Borrowing from the market\\n     *  Accept claims only from the member\\n     *  Borrow amount must in the range of creditLimit, minLoan, debtCeiling and not overdue\\n     *  @param amount Borrow amount\\n     */\\n    function borrow(uint256 amount) external;\\n\\n    /**\\n     *  @dev Repay the loan\\n     *  Accept claims only from the member\\n     *  Updated member lastPaymentEpoch only when the repayment amount is greater than interest\\n     *  @param amount Repay amount\\n     */\\n    function repayBorrow(uint256 amount) external;\\n\\n    /**\\n     *  @dev Repay the loan\\n     *  Accept claims only from the member\\n     *  Updated member lastPaymentEpoch only when the repayment amount is greater than interest\\n     *  @param borrower Borrower address\\n     *  @param amount Repay amount\\n     */\\n    function repayBorrowBehalf(address borrower, uint256 amount) external;\\n\\n    /**\\n     *  @dev Update borrower overdue info\\n     *  @param account Borrower address\\n     */\\n    function updateOverdueInfo(address account) external;\\n\\n    /**\\n     *  @dev debt write off\\n     *  @param borrower Borrower address\\n     *  @param amount WriteOff amount\\n     */\\n    function debtWriteOff(address borrower, uint256 amount) external;\\n\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xde8f642fec77b77e19b6b6d438aaf1a52fd06e1d17c1c1f140db2c1aa22e0cc1\",\"license\":\"UNLICENSED\"},\"@unioncredit/v1-sdk/contracts/interfaces/IUserManager.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title UserManager Interface\\n * @dev Manages the Union members credit lines, and their vouchees and borrowers info.\\n */\\ninterface IUserManager {\\n    /**\\n     *  @dev Check if the account is a valid member\\n     *  @param account Member address\\n     *  @return Address whether is member\\n     */\\n    function checkIsMember(address account) external view returns (bool);\\n\\n    /**\\n     *  @dev Get member borrowerAddresses\\n     *  @param account Member address\\n     *  @return Address array\\n     */\\n    function getBorrowerAddresses(address account) external view returns (address[] memory);\\n\\n    /**\\n     *  @dev Get member stakerAddresses\\n     *  @param account Member address\\n     *  @return Address array\\n     */\\n    function getStakerAddresses(address account) external view returns (address[] memory);\\n\\n    /**\\n     *  @dev Get member backer asset\\n     *  @param account Member address\\n     *  @param borrower Borrower address\\n     *  @return Trust amount, vouch amount, and locked stake amount\\n     */\\n    function getBorrowerAsset(address account, address borrower)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    /**\\n     *  @dev Get member stakers asset\\n     *  @param account Member address\\n     *  @param staker Staker address\\n     *  @return Vouch amount and lockedStake\\n     */\\n    function getStakerAsset(address account, address staker)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    /**\\n     *  @dev Get the member's available credit line\\n     *  @param account Member address\\n     *  @return Limit\\n     */\\n    function getCreditLimit(address account) external view returns (int256);\\n\\n    function totalStaked() external view returns (uint256);\\n\\n    function totalFrozen() external view returns (uint256);\\n\\n    function newMemberFee() external view returns (uint256);\\n\\n    function getFrozenCoinAge(address staker, uint256 pastBlocks) external view returns (uint256);\\n\\n    /**\\n     *  @dev Add a new member\\n     *  Accept claims only from the admin\\n     *  @param account Member address\\n     */\\n    function addMember(address account) external;\\n\\n    \\n    function withdrawRewards() external;\\n\\n    /**\\n     *  @dev Update the trust amount for exisitng members.\\n     *  @param borrower Borrower address\\n     *  @param trustAmount Trust amount\\n     */\\n    function updateTrust(address borrower, uint256 trustAmount) external;\\n\\n    /**\\n     *  @dev Apply for membership, and burn UnionToken as application fees\\n     *  @param newMember New member address\\n     */\\n    function registerMember(address newMember) external;\\n\\n    /**\\n     *  @dev Stop vouch for other member.\\n     *  @param staker Staker address\\n     *  @param account Account address\\n     */\\n    function cancelVouch(address staker, address account) external;\\n\\n    /**\\n     *  @dev Change the credit limit model\\n     *  Accept claims only from the admin\\n     *  @param newCreditLimitModel New credit limit model address\\n     */\\n    function setCreditLimitModel(address newCreditLimitModel) external;\\n\\n    /**\\n     *  @dev Get the user's locked stake from all his backed loans\\n     *  @param staker Staker address\\n     *  @return LockedStake\\n     */\\n    function getTotalLockedStake(address staker) external view returns (uint256);\\n\\n    /**\\n     *  @dev Get staker's defaulted / frozen staked token amount\\n     *  @param staker Staker address\\n     *  @return Frozen token amount\\n     */\\n    function getTotalFrozenAmount(address staker) external view returns (uint256);\\n\\n    /**\\n     *  @dev Update userManager locked info\\n     *  @param borrower Borrower address\\n     *  @param amount Borrow or repay amount(Including previously accrued interest)\\n     *  @param isBorrow True is borrow, false is repay\\n     */\\n    function updateLockedData(\\n        address borrower,\\n        uint256 amount,\\n        bool isBorrow\\n    ) external;\\n\\n    /**\\n     *  @dev Get the user's deposited stake amount\\n     *  @param account Member address\\n     *  @return Deposited stake amount\\n     */\\n    function getStakerBalance(address account) external view returns (uint256);\\n\\n    /**\\n     *  @dev Stake\\n     *  @param amount Amount\\n     */\\n    function stake(uint256 amount) external;\\n\\n    /**\\n     *  @dev Unstake\\n     *  @param amount Amount\\n     */\\n    function unstake(uint256 amount) external;\\n\\n    /**\\n     *  @dev Update total frozen\\n     *  @param account borrower address\\n     *  @param isOverdue account is overdue\\n     */\\n    function updateTotalFrozen(address account, bool isOverdue) external;\\n\\n    function batchUpdateTotalFrozen(address[] calldata account, bool[] calldata isOverdue) external;\\n\\n    /**\\n     *  @dev Repay user's loan overdue, called only from the lending market\\n     *  @param account User address\\n     *  @param lastRepay Last repay block number\\n     */\\n    function repayLoanOverdue(\\n        address account,\\n        address token,\\n        uint256 lastRepay\\n    ) external;\\n\\n    function debtWriteOff(address borrower, uint256 amount) external;\\n\\n    function getVouchingAmount(address staker, address borrower) external view returns (uint256);    \\n}\\n\",\"keccak256\":\"0x753e9eba796354e96c46b9888c907345415f02d0ac9d5d3458843e63edda0abc\",\"license\":\"UNLICENSED\"},\"src/UnionQuest/UnionQuest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@unioncredit/v1-sdk/contracts/UnionVoucher.sol\\\";\\n\\ncontract UnionQuest is Context, ERC165, IERC1155MetadataURI, Ownable, UnionVoucher {\\n    using Address for address;\\n\\n    uint256 private constant SPEED_DIVISOR = 10;\\n    uint256 private constant SKILL_INCREASE_DIVISOR = 10;\\n    uint256 private constant TRUST_MODIFIER = 0.01 ether;\\n    uint256 private constant MIN_SKILL = 1;\\n    uint256 private constant MAX_SKILL = 3;\\n\\n    struct ItemType {\\n        string name;\\n        string description;\\n        string image;\\n        uint256 stake;\\n        uint256[] toolIds;\\n        uint256[] toolBonuses;\\n    }\\n\\n    struct Recipe {\\n        uint256[] inputIds;\\n        uint256[] inputQuantities;\\n        uint256 output;\\n    }\\n\\n    struct Player {\\n        int256 startX;\\n        int256 startY;\\n        int256 endX;\\n        int256 endY;\\n        uint256 startTimestamp;\\n    }\\n\\n    ItemType[] private itemTypes;\\n    Recipe[] private recipes;\\n\\n    mapping(address => Player) private players;\\n    mapping(address => mapping(uint256 => uint256)) private skills;\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    event AddItemType(uint256 _index, ItemType _itemType);\\n    event AddRecipe(uint256 _index, Recipe _recipe);\\n    event Move(address account, int256 x, int256 y);\\n    event IncreaseSkill(address indexed account, uint256 id, uint256 value);\\n\\n    constructor(\\n        address _marketRegistry,\\n        address _unionToken,\\n        address _underlyingToken\\n    ) BaseUnionMember(_marketRegistry, _unionToken, _underlyingToken) {}\\n\\n    function uri(uint256 id) external view virtual override returns (string memory) {\\n        ItemType storage item = itemTypes[id];\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    'data:text/plain,{\\\"name\\\":\\\"',\\n                    item.name,\\n                    '\\\",\\\"description\\\":\\\"',\\n                    item.description,\\n                    '\\\",\\\"image\\\":\\\"data:image/svg+xml,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"100\\\" height=\\\"100\\\">',\\n                    item.image,\\n                    '</svg>\\\"}'\\n                )\\n            );\\n    }\\n\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256 balance) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n\\n        balance = _balances[id][account];\\n\\n        Player storage player = players[account];\\n\\n        if (id == getItem(player.endX, player.endY)) {\\n            int256 vX = player.endX - player.startX;\\n            int256 vY = player.endY - player.startY;\\n\\n            uint256 distanceNeeded = uint256(sqrt(vX * vX + vY * vY));\\n            uint256 distanceTravelled = (block.timestamp - player.startTimestamp) / SPEED_DIVISOR;\\n\\n            if (distanceTravelled >= distanceNeeded) {\\n                uint256 skillIncrease = (miningBonus(account, id) *\\n                    (block.timestamp - (player.startTimestamp + distanceNeeded * SPEED_DIVISOR))) /\\n                    SKILL_INCREASE_DIVISOR;\\n\\n                balance += skillIncrease * skills[_msgSender()][id] + (skillIncrease * skillIncrease) / 2;\\n            }\\n        }\\n    }\\n\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        Player storage player = players[from];\\n        _move(_msgSender(), player.endX, player.endY);\\n\\n        uint256 fromBalance = _balances[id][from];\\n\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        Player storage player = players[from];\\n        _move(_msgSender(), player.endX, player.endY);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        address operator = _msgSender();\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n    }\\n\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        address operator = _msgSender();\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n    }\\n\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function addItemTypes(ItemType[] memory _itemTypes) external onlyOwner {\\n        for (uint256 i; i < _itemTypes.length; i++) {\\n            itemTypes.push(_itemTypes[i]);\\n            emit AddItemType(itemTypes.length - 1, _itemTypes[i]);\\n        }\\n    }\\n\\n    function addRecipes(Recipe[] memory _recipes) external onlyOwner {\\n        for (uint256 i; i < _recipes.length; i++) {\\n            recipes.push(_recipes[i]);\\n            emit AddRecipe(recipes.length - 1, _recipes[i]);\\n        }\\n    }\\n\\n    function stake(uint256 amount) external onlyOwner {\\n        _stake(amount);\\n    }\\n\\n    function unstake(uint256 amount) external onlyOwner {\\n        _unstake(amount);\\n\\n        underlyingToken.transfer(owner(), amount);\\n    }\\n\\n    function withdrawRewards() external onlyOwner {\\n        _withdrawRewards();\\n\\n        unionToken.transfer(owner(), unionToken.balanceOf(address(this)));\\n    }\\n\\n    function updateTrust(address borrower_) external {\\n        Player storage player = players[borrower_];\\n        _move(_msgSender(), player.endX, player.endY);\\n\\n        uint256 totalSkill;\\n        for (uint256 i = MIN_SKILL; i < MAX_SKILL; i++) {\\n            totalSkill += skills[borrower_][i];\\n        }\\n\\n        _updateTrust(borrower_, totalSkill * TRUST_MODIFIER);\\n    }\\n\\n    function move(int256 x, int256 y) external {\\n        _move(_msgSender(), x, y);\\n    }\\n\\n    function _move(\\n        address account,\\n        int256 x,\\n        int256 y\\n    ) internal {\\n        Player storage player = players[account];\\n\\n        int256 vX = player.endX - player.startX;\\n        int256 vY = player.endY - player.startY;\\n\\n        uint256 distanceNeeded = uint256(sqrt(vX * vX + vY * vY));\\n        uint256 distanceTravelled = (block.timestamp - player.startTimestamp) / SPEED_DIVISOR;\\n        if (distanceTravelled < distanceNeeded) {\\n            player.startX += (vX * int256(distanceTravelled)) / int256(distanceNeeded);\\n            player.startY += (vY * int256(distanceTravelled)) / int256(distanceNeeded);\\n        } else {\\n            player.startX = player.endX;\\n            player.startY = player.endY;\\n\\n            uint256 tileItem = getItem(player.endX, player.endY);\\n            uint256 skillIncrease = (miningBonus(account, tileItem) *\\n                (block.timestamp - (player.startTimestamp + distanceNeeded * SPEED_DIVISOR))) / SKILL_INCREASE_DIVISOR;\\n\\n            _mint(\\n                account,\\n                tileItem,\\n                (skillIncrease * skills[account][tileItem] + (skillIncrease * skillIncrease) / 2),\\n                \\\"\\\"\\n            );\\n\\n            skills[account][tileItem] += skillIncrease;\\n\\n            emit IncreaseSkill(account, tileItem, skillIncrease);\\n        }\\n\\n        player.endX = x;\\n        player.endY = y;\\n        player.startTimestamp = block.timestamp;\\n\\n        emit Move(_msgSender(), x, y);\\n    }\\n\\n    function buy(uint256 id, uint256 amount) external {\\n        ItemType storage item = itemTypes[id];\\n\\n        require(item.stake > 0, \\\"Item stake not set\\\");\\n\\n        Player storage player = players[_msgSender()];\\n        _move(_msgSender(), player.endX, player.endY);\\n\\n        IERC20(underlyingToken).transferFrom(_msgSender(), address(this), item.stake * amount);\\n        _mint(_msgSender(), id, amount, \\\"\\\");\\n    }\\n\\n    function sell(uint256 id, uint256 amount) external {\\n        ItemType storage item = itemTypes[id];\\n\\n        require(item.stake > 0, \\\"Item stake not set\\\");\\n\\n        Player storage player = players[_msgSender()];\\n        _move(_msgSender(), player.endX, player.endY);\\n\\n        _burn(_msgSender(), id, amount);\\n        IERC20(underlyingToken).transfer(_msgSender(), item.stake * amount);\\n    }\\n\\n    function craft(uint256 recipeId) external {\\n        Recipe storage recipe = recipes[recipeId];\\n        Player storage player = players[_msgSender()];\\n\\n        _move(_msgSender(), player.endX, player.endY);\\n        for (uint256 i; i < recipe.inputIds.length; i++) {\\n            _burn(_msgSender(), recipe.inputIds[i], recipe.inputQuantities[i]);\\n        }\\n\\n        _mint(_msgSender(), recipe.output, 1, \\\"\\\");\\n    }\\n\\n    function miningBonus(address account, uint256 id) private view returns (uint256 bonus) {\\n        ItemType storage item = itemTypes[id];\\n        for (uint256 i; i < item.toolIds.length; i++) {\\n            if (item.toolBonuses[i] > bonus && balanceOf(account, item.toolIds[i]) > 0) {\\n                bonus = item.toolBonuses[i];\\n            }\\n        }\\n    }\\n\\n    function sqrt(int256 x) private pure returns (int256 y) {\\n        int256 z = (x + 1) / 2;\\n        y = x;\\n        while (z < y) {\\n            y = z;\\n            z = (x / z + z) / 2;\\n        }\\n    }\\n\\n    function getItem(int256 x, int256 y) private pure returns (uint256) {\\n        if ((x == 0 && y == 0) || x > 10 || x < -9 || y > 10 || y < -9) {\\n            return 0;\\n        }\\n\\n        uint256 res = uint256(keccak256(abi.encode(x, y))) % 5;\\n        if (res < 2) {\\n            return 0;\\n        } else if (res < 4) {\\n            return 1;\\n        }\\n\\n        return 2;\\n    }\\n}\\n\",\"keccak256\":\"0x2ef6ddcc22ad9dd61f3643edf155ca331d94eb213af4e993aa2762c3fff527e3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018e5760003560e01c8063827759fd116100e4578063d6febde811610092578063d6febde814610386578063d79875eb14610399578063e985e9c5146103ac578063ecb96fe6146103e8578063f242432a1461040f578063f2fde38b14610422578063f3917bd214610435578063f70222e11461044857600080fd5b8063827759fd146103225780638da5cb5b14610335578063a22cb4651461033d578063a694fc3a14610350578063c7b8981c14610363578063d02982cf1461036b578063d04df3171461037357600080fd5b80634e1273f4116101415780634e1273f41461027c5780635062e90f1461029c5780635c8a7687146102b157806363315637146102d8578063715018a6146102ff578063750399f71461030757806375edf6bb1461030f57600080fd5b8062fdd58e1461019357806301ffc9a7146101b95780630e89341c146101ed5780632495a5991461020d5780632e17de78146102415780632e62daa5146102565780632eb2c2d614610269575b600080fd5b6101a66101a1366004612833565b61046f565b6040519081526020015b60405180910390f35b6101dd6101c7366004612c90565b6001600160e01b0319166301ffc9a760e01b1490565b60405190151581526020016101b0565b6102006101fb366004612ce9565b61064a565b6040516101b0919061307f565b6102347f000000000000000000000000000000000000000000000000000000000000000081565b6040516101b09190612f21565b61025461024f366004612ce9565b6106b4565b005b610254610264366004612b58565b610797565b6102546102773660046126f7565b6108d3565b61028f61028a366004612903565b61096a565b6040516101b0919061303e565b6102a4610acd565b6040516101b09190612ff1565b6102347f000000000000000000000000000000000000000000000000000000000000000081565b6102347f000000000000000000000000000000000000000000000000000000000000000081565b610254610b75565b6101a6610bb0565b61025461031d366004612cc8565b610c4f565b6102546103303660046129cf565b610c5a565b610234610dea565b61025461034b366004612806565b610df9565b61025461035e366004612ce9565b610e04565b610254610e3f565b6101dd610fb8565b61025461038136600461269c565b611057565b610254610394366004612cc8565b6110f3565b6102546103a7366004612cc8565b61124d565b6101dd6103ba3660046126bf565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b6102347f000000000000000000000000000000000000000000000000000000000000000081565b61025461041d3660046127a0565b611377565b61025461043036600461269c565b6113fe565b610254610443366004612ce9565b61149b565b6102347f000000000000000000000000000000000000000000000000000000000000000081565b60006001600160a01b0383166104df5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b5060008181526005602090815260408083206001600160a01b03861684528252808320546003928390529220600281015491810154909161051f9161158c565b831415610643578054600282015460009161053991613456565b90506000826001015483600301546105519190613456565b9050600061057b61056283806133b4565b61056c85806133b4565b6105769190613319565b61164a565b90506000600a8560040154426105919190613495565b61059b91906133a0565b905081811061063e576000600a6105b28185613437565b87600401546105c1919061335a565b6105cb9042613495565b6105d58b8b6116a3565b6105df9190613437565b6105e991906133a0565b905060026105f78280613437565b61060191906133a0565b3360009081526004602090815260408083208c84529091529020546106269083613437565b610630919061335a565b61063a908861335a565b9650505b505050505b5092915050565b606060006001838154811061066f57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060060201905080600001816001018260020160405160200161069d93929190612e36565b604051602081830303815290604052915050919050565b336106bd610dea565b6001600160a01b0316146106e35760405162461bcd60e51b81526004016104d690613169565b6106ec816117a8565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb610723610dea565b836040518363ffffffff1660e01b8152600401610741929190612fd8565b602060405180830381600087803b15801561075b57600080fd5b505af115801561076f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107939190612c74565b5050565b336107a0610dea565b6001600160a01b0316146107c65760405162461bcd60e51b81526004016104d690613169565b60005b81518110156107935760028282815181106107f457634e487b7160e01b600052603260045260246000fd5b60209081029190910181015182546001810184556000938452928290208151805192946003029091019261082d928492909101906124e7565b50602082810151805161084692600185019201906124e7565b5060409190910151600291820155547f7fabb594fb3d96ed59cb97035073b397ebadb4bd180ee6d8c343fd215c3027829061088390600190613495565b8383815181106108a357634e487b7160e01b600052603260045260246000fd5b60200260200101516040516108b9929190613277565b60405180910390a1806108cb81613532565b9150506107c9565b6001600160a01b0385163314806108ef57506108ef85336103ba565b6109565760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b60648201526084016104d6565b610963858585858561181f565b5050505050565b606081518351146109cf5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016104d6565b600083516001600160401b038111156109f857634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610a21578160200160208202803683370190505b50905060005b8451811015610ac357610a88858281518110610a5357634e487b7160e01b600052603260045260246000fd5b6020026020010151858381518110610a7b57634e487b7160e01b600052603260045260246000fd5b602002602001015161046f565b828281518110610aa857634e487b7160e01b600052603260045260246000fd5b6020908102919091010152610abc81613532565b9050610a27565b5090505b92915050565b60405163eb14845960e01b81526060906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063eb14845990610b1c903090600401612f21565b60006040518083038186803b158015610b3457600080fd5b505afa158015610b48573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b70919081019061285e565b905090565b33610b7e610dea565b6001600160a01b031614610ba45760405162461bcd60e51b81526004016104d690613169565b610bae6000611a82565b565b604051632640d9db60e01b81526000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690632640d9db90610bff903090600401612f21565b60206040518083038186803b158015610c1757600080fd5b505afa158015610c2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b709190612d01565b610793338383611ad2565b33610c63610dea565b6001600160a01b031614610c895760405162461bcd60e51b81526004016104d690613169565b60005b8151811015610793576001828281518110610cb757634e487b7160e01b600052603260045260246000fd5b602090810291909101810151825460018101845560009384529282902081518051929460060290910192610cf092849290910190612532565b506020828101518051610d099260018501920190612532565b5060408201518051610d25916002840191602090910190612532565b506060820151600382015560808201518051610d4b9160048401916020909101906124e7565b5060a08201518051610d679160058401916020909101906124e7565b5050600180547f18c427e9ca812ea619b14b92f83861d927d5c8ed96aa5bb46447bfc4143f40aa9250610d9a9190613495565b838381518110610dba57634e487b7160e01b600052603260045260246000fd5b6020026020010151604051610dd09291906131ca565b60405180910390a180610de281613532565b915050610c8c565b6000546001600160a01b031690565b610793338383611d60565b33610e0d610dea565b6001600160a01b031614610e335760405162461bcd60e51b81526004016104d690613169565b610e3c81611e41565b50565b33610e48610dea565b6001600160a01b031614610e6e5760405162461bcd60e51b81526004016104d690613169565b610e76611f4f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb610ead610dea565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610ef9903090600401612f21565b60206040518083038186803b158015610f1157600080fd5b505afa158015610f25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f499190612d01565b6040518363ffffffff1660e01b8152600401610f66929190612fd8565b602060405180830381600087803b158015610f8057600080fd5b505af1158015610f94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3c9190612c74565b6040516321d2a57360e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906321d2a57390611007903090600401612f21565b60206040518083038186803b15801561101f57600080fd5b505afa158015611033573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b709190612c74565b6001600160a01b0381166000908152600360205260409020611083335b82600201548360030154611ad2565b600060015b60038110156110d3576001600160a01b03841660009081526004602090815260408083208484529091529020546110bf908361335a565b9150806110cb81613532565b915050611088565b506110ee836110e9662386f26fc1000084613437565b611fbe565b505050565b60006001838154811061111657634e487b7160e01b600052603260045260246000fd5b90600052602060002090600602019050600081600301541161114a5760405162461bcd60e51b81526004016104d69061319e565b3360008181526003602052604090209061116390611074565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166323b872dd33308686600301546111a49190613437565b6040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401602060405180830381600087803b1580156111f357600080fd5b505af1158015611207573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122b9190612c74565b5061124733858560405180602001604052806000815250612042565b50505050565b60006001838154811061127057634e487b7160e01b600052603260045260246000fd5b9060005260206000209060060201905060008160030154116112a45760405162461bcd60e51b81526004016104d69061319e565b336000818152600360205260409020906112bd90611074565b6112c83385856120bd565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663a9059cbb338585600301546113089190613437565b6040518363ffffffff1660e01b8152600401611325929190612fd8565b602060405180830381600087803b15801561133f57600080fd5b505af1158015611353573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109639190612c74565b6001600160a01b038516331480611393575061139385336103ba565b6113f15760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084016104d6565b610963858585858561218f565b33611407610dea565b6001600160a01b03161461142d5760405162461bcd60e51b81526004016104d690613169565b6001600160a01b0381166114925760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104d6565b610e3c81611a82565b6000600282815481106114be57634e487b7160e01b600052603260045260246000fd5b6000918252602080832033808552600392839052604090942092909102019250906114e890611074565b60005b825481101561156b576115593384600001838154811061151b57634e487b7160e01b600052603260045260246000fd5b906000526020600020015485600101848154811061154957634e487b7160e01b600052603260045260246000fd5b90600052602060002001546120bd565b8061156381613532565b9150506114eb565b506110ee338360020154600160405180602001604052806000815250612042565b60008215801561159a575081155b806115a55750600a83135b806115b1575060081983125b806115bc5750600a82135b806115c8575060081982125b156115d557506000610ac7565b6000600584846040516020016115f5929190918252602082015260400190565b6040516020818303038152906040528051906020012060001c611618919061354d565b9050600281101561162d576000915050610ac7565b6004811015611640576001915050610ac7565b5060029392505050565b600080600261165a846001613319565b6116649190613372565b90508291505b8181121561169d579050806002816116828186613372565b61168c9190613319565b6116969190613372565b905061166a565b50919050565b600080600183815481106116c757634e487b7160e01b600052603260045260246000fd5b9060005260206000209060060201905060005b60048201548110156117a0578282600501828154811061170a57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154118015611758575060006117568684600401848154811061174657634e487b7160e01b600052603260045260246000fd5b906000526020600020015461046f565b115b1561178e5781600501818154811061178057634e487b7160e01b600052603260045260246000fd5b906000526020600020015492505b8061179881613532565b9150506116da565b505092915050565b6040516305c2fbcf60e31b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e17de78906024015b600060405180830381600087803b15801561180b57600080fd5b505af1158015610963573d6000803e3d6000fd5b81518351146118815760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016104d6565b6001600160a01b0384166118a75760405162461bcd60e51b81526004016104d6906130da565b6001600160a01b038516600090815260036020526040902033906118ca82611074565b60005b8551811015611a135760008682815181106118f857634e487b7160e01b600052603260045260246000fd5b60200260200101519050600086838151811061192457634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160008481526005835260408082206001600160a01b038f1683529093529190912054909150818110156119755760405162461bcd60e51b81526004016104d69061311f565b8181036005600085815260200190815260200160002060008d6001600160a01b03166001600160a01b0316815260200190815260200160002081905550816005600085815260200190815260200160002060008c6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546119f8919061335a565b9250508190555050505080611a0c90613532565b90506118cd565b50856001600160a01b0316876001600160a01b0316836001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8888604051611a63929190613051565b60405180910390a4611a798288888888886122b2565b50505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038316600090815260036020526040812080546002820154919291611afe9190613456565b9050600082600101548360030154611b169190613456565b90506000611b2761056283806133b4565b90506000600a856004015442611b3d9190613495565b611b4791906133a0565b905081811015611bb25781611b5c82866133b4565b611b669190613372565b856000016000828254611b799190613319565b90915550829050611b8a82856133b4565b611b949190613372565b856001016000828254611ba79190613319565b90915550611d029050565b6002850154808655600386015460018701819055600091611bd29161158c565b90506000600a611be28186613437565b8860040154611bf1919061335a565b611bfb9042613495565b611c058c856116a3565b611c0f9190613437565b611c1991906133a0565b9050611c838a836002611c2c8580613437565b611c3691906133a0565b6001600160a01b038e166000908152600460209081526040808320898452909152902054611c649086613437565b611c6e919061335a565b60405180602001604052806000815250612042565b6001600160a01b038a16600090815260046020908152604080832085845290915281208054839290611cb690849061335a565b909155505060408051838152602081018390526001600160a01b038c16917fa338c777ba53c28df97d05a2fc9cc8f85b2026c546ac90474f32ea4f52b1c2e3910160405180910390a250505b6002850187905560038501869055426004860155604080513381526020810189905280820188905290517fa091cdbb704420530e085476da579abbdfb46bfbcb9b8edbb0936b94e0b007dd9181900360600190a15050505050505050565b816001600160a01b0316836001600160a01b03161415611dd45760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016104d6565b6001600160a01b03838116600081815260066020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b60405163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b390611eaf907f0000000000000000000000000000000000000000000000000000000000000000908590600401612fd8565b602060405180830381600087803b158015611ec957600080fd5b505af1158015611edd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f019190612c74565b5060405163534a7e1d60e11b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a694fc3a906024016117f1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c7b8981c6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611faa57600080fd5b505af1158015611247573d6000803e3d6000fd5b6040516343fbb8f560e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906343fbb8f59061200c9085908590600401612fd8565b600060405180830381600087803b15801561202657600080fd5b505af115801561203a573d6000803e3d6000fd5b505050505050565b60008381526005602090815260408083206001600160a01b038816845290915281208054339285929161207690849061335a565b909155505060408051858152602081018590526001600160a01b03808816926000929185169160008051602061367e83398151915291015b60405180910390a45050505050565b60008281526005602090815260408083206001600160a01b038716845290915290205433908281101561213e5760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b60648201526084016104d6565b60008481526005602090815260408083206001600160a01b038981168086529184528285208887039055825189815293840188905290929086169160008051602061367e83398151915291016120ae565b6001600160a01b0384166121b55760405162461bcd60e51b81526004016104d6906130da565b6001600160a01b038516600090815260036020526040902033906121d882611074565b60008581526005602090815260408083206001600160a01b038b1684529091529020548481101561221b5760405162461bcd60e51b81526004016104d69061311f565b60008681526005602090815260408083206001600160a01b038c811685529252808320888503905590891682528120805487929061225a90849061335a565b909155505060408051878152602081018790526001600160a01b03808a16928b8216929187169160008051602061367e833981519152910160405180910390a46122a883898989898961241d565b5050505050505050565b6001600160a01b0384163b1561203a5760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906122f69089908990889088908890600401612f35565b602060405180830381600087803b15801561231057600080fd5b505af1925050508015612340575060408051601f3d908101601f1916820190925261233d91810190612cac565b60015b6123ed5761234c6135a3565b806308c379a0141561238657506123616135bb565b8061236c5750612388565b8060405162461bcd60e51b81526004016104d6919061307f565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016104d6565b6001600160e01b0319811663bc197c8160e01b14611a795760405162461bcd60e51b81526004016104d690613092565b6001600160a01b0384163b1561203a5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906124619089908990889088908890600401612f93565b602060405180830381600087803b15801561247b57600080fd5b505af19250505080156124ab575060408051601f3d908101601f191682019092526124a891810190612cac565b60015b6124b75761234c6135a3565b6001600160e01b0319811663f23a6e6160e01b14611a795760405162461bcd60e51b81526004016104d690613092565b828054828255906000526020600020908101928215612522579160200282015b82811115612522578251825591602001919060010190612507565b5061252e9291506125a5565b5090565b82805461253e906134ac565b90600052602060002090601f0160209004810192826125605760008555612522565b82601f1061257957805160ff1916838001178555612522565b828001600101855582156125225791820182811115612522578251825591602001919060010190612507565b5b8082111561252e57600081556001016125a6565b600082601f8301126125ca578081fd5b813560206125d7826132f6565b6040516125e48282613506565b8381528281019150858301600585901b87018401881015612603578586fd5b855b8581101561262157813584529284019290840190600101612605565b5090979650505050505050565b600082601f83011261263e578081fd5b81356001600160401b038111156126575761265761358d565b60405161266e601f8301601f191660200182613506565b818152846020838601011115612682578283fd5b816020850160208301379081016020019190915292915050565b6000602082840312156126ad578081fd5b81356126b881613644565b9392505050565b600080604083850312156126d1578081fd5b82356126dc81613644565b915060208301356126ec81613644565b809150509250929050565b600080600080600060a0868803121561270e578081fd5b853561271981613644565b9450602086013561272981613644565b935060408601356001600160401b0380821115612744578283fd5b61275089838a016125ba565b94506060880135915080821115612765578283fd5b61277189838a016125ba565b93506080880135915080821115612786578283fd5b506127938882890161262e565b9150509295509295909350565b600080600080600060a086880312156127b7578283fd5b85356127c281613644565b945060208601356127d281613644565b9350604086013592506060860135915060808601356001600160401b038111156127fa578182fd5b6127938882890161262e565b60008060408385031215612818578182fd5b823561282381613644565b915060208301356126ec81613659565b60008060408385031215612845578182fd5b823561285081613644565b946020939093013593505050565b60006020808385031215612870578182fd5b82516001600160401b03811115612885578283fd5b8301601f81018513612895578283fd5b80516128a0816132f6565b6040516128ad8282613506565b8281528481019150838501600584901b850186018910156128cc578687fd5b8694505b838510156128f75780516128e381613644565b8352600194909401939185019185016128d0565b50979650505050505050565b60008060408385031215612915578182fd5b82356001600160401b038082111561292b578384fd5b818501915085601f83011261293e578384fd5b8135602061294b826132f6565b6040516129588282613506565b8381528281019150858301600585901b870184018b1015612977578889fd5b8896505b848710156129a257803561298e81613644565b83526001969096019591830191830161297b565b50965050860135925050808211156129b8578283fd5b506129c5858286016125ba565b9150509250929050565b600060208083850312156129e1578182fd5b82356001600160401b03808211156129f7578384fd5b818501915085601f830112612a0a578384fd5b8135612a15816132f6565b604051612a228282613506565b8281528581019150848601600584901b860187018a1015612a41578788fd5b875b84811015612b4957813586811115612a5957898afd5b870160c0818d03601f19011215612a6e57898afd5b612a766132ce565b8982013588811115612a86578b8cfd5b612a948e8c8386010161262e565b825250604082013588811115612aa8578b8cfd5b612ab68e8c8386010161262e565b8b8301525060608083013589811115612acd578c8dfd5b612adb8f8d8387010161262e565b6040840152506080808401358284015260a0840135915089821115612afe578c8dfd5b612b0c8f8d848701016125ba565b908301525060c082013588811115612b22578b8cfd5b612b308e8c838601016125ba565b60a0830152508552509287019290870190600101612a43565b50909998505050505050505050565b60006020808385031215612b6a578182fd5b82356001600160401b0380821115612b80578384fd5b818501915085601f830112612b93578384fd5b8135612b9e816132f6565b60408051612bac8382613506565b8381528681019250858701600585901b870188018b1015612bcb578889fd5b885b85811015612c6457813587811115612be3578a8bfd5b88016060818e03601f19011215612bf8578a8bfd5b8451612c03816134e1565b8a82013589811115612c13578c8dfd5b612c218f8d838601016125ba565b8252508582013589811115612c34578c8dfd5b612c428f8d838601016125ba565b828d015250606091909101358582015285529388019390880190600101612bcd565b50909a9950505050505050505050565b600060208284031215612c85578081fd5b81516126b881613659565b600060208284031215612ca1578081fd5b81356126b881613667565b600060208284031215612cbd578081fd5b81516126b881613667565b60008060408385031215612cda578182fd5b50508035926020909101359150565b600060208284031215612cfa578081fd5b5035919050565b600060208284031215612d12578081fd5b5051919050565b6000815180845260208085019450808401835b83811015612d4857815187529582019590820190600101612d2c565b509495945050505050565b60008151808452815b81811015612d7857602081850181015186830182015201612d5c565b81811115612d895782602083870101525b50601f01601f19169290920160200192915050565b8054600090600181811c9080831680612db857607f831692505b6020808410821415612dd857634e487b7160e01b86526022600452602486fd5b818015612dec5760018114612dfd57612e2a565b60ff19861689528489019650612e2a565b60008881526020902060005b86811015612e225781548b820152908501908301612e09565b505084890196505b50505050505092915050565b783230ba309d3a32bc3a17b83630b4b7163d913730b6b2911d1160391b81526000612e646019830186612d9e565b701116113232b9b1b934b83a34b7b7111d1160791b8152612e886011820186612d9e565b90507f222c22696d616765223a22646174613a696d6167652f7376672b786d6c2c3c7381527f766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f3230303060208201527f2f737667222077696474683d2231303022206865696768743d22313030223e006040820152612f06605f820185612d9e565b673c2f7376673e227d60c01b81526008019695505050505050565b6001600160a01b0391909116815260200190565b6001600160a01b0386811682528516602082015260a060408201819052600090612f6190830186612d19565b8281036060840152612f738186612d19565b90508281036080840152612f878185612d53565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090612fcd90830184612d53565b979650505050505050565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b818110156130325783516001600160a01b03168352928401929184019160010161300d565b50909695505050505050565b6020815260006126b86020830184612d19565b6040815260006130646040830185612d19565b82810360208401526130768185612d19565b95945050505050565b6020815260006126b86020830184612d53565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b602080825260129082015271125d195b481cdd185ad9481b9bdd081cd95d60721b604082015260600190565b828152604060208201526000825160c060408401526131ed610100840182612d53565b90506020840151603f198085840301606086015261320b8383612d53565b925060408601519150808584030160808601526132288383612d53565b9250606086015160a086015260808601519150808584030160c086015261324f8383612d19565b925060a08601519150808584030160e08601525061326d8282612d19565b9695505050505050565b82815260406020820152600082516060604084015261329960a0840182612d19565b90506020840151603f198483030160608501526132b68282612d19565b91505060408401516080840152809150509392505050565b60405160c081016001600160401b03811182821017156132f0576132f061358d565b60405290565b60006001600160401b0382111561330f5761330f61358d565b5060051b60200190565b600080821280156001600160ff1b038490038513161561333b5761333b613561565b600160ff1b839003841281161561335457613354613561565b50500190565b6000821982111561336d5761336d613561565b500190565b60008261338157613381613577565b600160ff1b82146000198414161561339b5761339b613561565b500590565b6000826133af576133af613577565b500490565b60006001600160ff1b03818413828413808216868404861116156133da576133da613561565b600160ff1b848712828116878305891216156133f8576133f8613561565b85871292508782058712848416161561341357613413613561565b8785058712818416161561342957613429613561565b505050929093029392505050565b600081600019048311821515161561345157613451613561565b500290565b60008083128015600160ff1b85018412161561347457613474613561565b6001600160ff1b038401831381161561348f5761348f613561565b50500390565b6000828210156134a7576134a7613561565b500390565b600181811c908216806134c057607f821691505b6020821081141561169d57634e487b7160e01b600052602260045260246000fd5b606081018181106001600160401b03821117156135005761350061358d565b60405250565b601f8201601f191681016001600160401b038111828210171561352b5761352b61358d565b6040525050565b600060001982141561354657613546613561565b5060010190565b60008261355c5761355c613577565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d11156135b857600481823e5160e01c5b90565b600060443d10156135c95790565b6040516003193d81016004833e81513d6001600160401b0381602484011181841117156135f857505050505090565b82850191508151818111156136105750505050505090565b843d870101602082850101111561362a5750505050505090565b61363960208286010187613506565b509095945050505050565b6001600160a01b0381168114610e3c57600080fd5b8015158114610e3c57600080fd5b6001600160e01b031981168114610e3c57600080fdfec3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62a2646970667358221220a4d30333cc0bf7d4ca0ca4653c08ac76cf944c6937d8475b0f315726e0799b4d64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "Returns the amount of tokens of token type `id` owned by `account`. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "getBorrowerAddresses()": {
        "details": "Get all the addresses the user vouched for",
        "returns": {
          "_0": "List of ddresses the user vouched for"
        }
      },
      "getStakerBalance()": {
        "details": "Get user's staking amount",
        "returns": {
          "_0": "Staking amount (in wei)"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "Returns true if `operator` is approved to transfer ``account``'s tokens. See {setApprovalForAll}."
      },
      "isMember()": {
        "details": "Return member's status",
        "returns": {
          "_0": "Member's status"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. Emits a {TransferBatch} event. Requirements: - `ids` and `amounts` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "Transfers `amount` tokens of token type `id` from `from` to `to`. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `amount`. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value."
      },
      "setApprovalForAll(address,bool)": {
        "details": "Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`, Emits an {ApprovalForAll} event. Requirements: - `operator` cannot be the caller."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "uri(uint256)": {
        "details": "Returns the URI for token type `id`. If the `\\{id\\}` substring is present in the URI, it must be replaced by clients with the actual token type ID."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3928,
        "contract": "src/UnionQuest/UnionQuest.sol:UnionQuest",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 13242,
        "contract": "src/UnionQuest/UnionQuest.sol:UnionQuest",
        "label": "itemTypes",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_struct(ItemType)13218_storage)dyn_storage"
      },
      {
        "astId": 13246,
        "contract": "src/UnionQuest/UnionQuest.sol:UnionQuest",
        "label": "recipes",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(Recipe)13227_storage)dyn_storage"
      },
      {
        "astId": 13251,
        "contract": "src/UnionQuest/UnionQuest.sol:UnionQuest",
        "label": "players",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(Player)13238_storage)"
      },
      {
        "astId": 13257,
        "contract": "src/UnionQuest/UnionQuest.sol:UnionQuest",
        "label": "skills",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 13263,
        "contract": "src/UnionQuest/UnionQuest.sol:UnionQuest",
        "label": "_balances",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 13269,
        "contract": "src/UnionQuest/UnionQuest.sol:UnionQuest",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(ItemType)13218_storage)dyn_storage": {
        "base": "t_struct(ItemType)13218_storage",
        "encoding": "dynamic_array",
        "label": "struct UnionQuest.ItemType[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Recipe)13227_storage)dyn_storage": {
        "base": "t_struct(Recipe)13227_storage",
        "encoding": "dynamic_array",
        "label": "struct UnionQuest.Recipe[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Player)13238_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct UnionQuest.Player)",
        "numberOfBytes": "32",
        "value": "t_struct(Player)13238_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ItemType)13218_storage": {
        "encoding": "inplace",
        "label": "struct UnionQuest.ItemType",
        "members": [
          {
            "astId": 13205,
            "contract": "src/UnionQuest/UnionQuest.sol:UnionQuest",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 13207,
            "contract": "src/UnionQuest/UnionQuest.sol:UnionQuest",
            "label": "description",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 13209,
            "contract": "src/UnionQuest/UnionQuest.sol:UnionQuest",
            "label": "image",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 13211,
            "contract": "src/UnionQuest/UnionQuest.sol:UnionQuest",
            "label": "stake",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 13214,
            "contract": "src/UnionQuest/UnionQuest.sol:UnionQuest",
            "label": "toolIds",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 13217,
            "contract": "src/UnionQuest/UnionQuest.sol:UnionQuest",
            "label": "toolBonuses",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Player)13238_storage": {
        "encoding": "inplace",
        "label": "struct UnionQuest.Player",
        "members": [
          {
            "astId": 13229,
            "contract": "src/UnionQuest/UnionQuest.sol:UnionQuest",
            "label": "startX",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          },
          {
            "astId": 13231,
            "contract": "src/UnionQuest/UnionQuest.sol:UnionQuest",
            "label": "startY",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          },
          {
            "astId": 13233,
            "contract": "src/UnionQuest/UnionQuest.sol:UnionQuest",
            "label": "endX",
            "offset": 0,
            "slot": "2",
            "type": "t_int256"
          },
          {
            "astId": 13235,
            "contract": "src/UnionQuest/UnionQuest.sol:UnionQuest",
            "label": "endY",
            "offset": 0,
            "slot": "3",
            "type": "t_int256"
          },
          {
            "astId": 13237,
            "contract": "src/UnionQuest/UnionQuest.sol:UnionQuest",
            "label": "startTimestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Recipe)13227_storage": {
        "encoding": "inplace",
        "label": "struct UnionQuest.Recipe",
        "members": [
          {
            "astId": 13221,
            "contract": "src/UnionQuest/UnionQuest.sol:UnionQuest",
            "label": "inputIds",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 13224,
            "contract": "src/UnionQuest/UnionQuest.sol:UnionQuest",
            "label": "inputQuantities",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 13226,
            "contract": "src/UnionQuest/UnionQuest.sol:UnionQuest",
            "label": "output",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}