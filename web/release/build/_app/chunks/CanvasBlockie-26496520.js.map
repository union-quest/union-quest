{"version":3,"file":"CanvasBlockie-26496520.js","sources":["../../../../../src/lib/components/generic/CanvasBlockie.svelte"],"sourcesContent":["<script lang=\"ts\">\n  // blockie generation code from https://github.com/stephensprinkle/react-blockies, itself referenced from https://github.com/alexvandesande/blockies\n  import {afterUpdate} from 'svelte';\n\n  export let _class = '';\n  export {_class as class};\n  export let address: string;\n  export let scale = 4;\n\n  let lastOptions:\n    | {\n        address: string;\n        scale: number;\n      }\n    | undefined = undefined;\n\n  let canvas: HTMLCanvasElement;\n\n  // The random number is a js implementation of the Xorshift PRNG\n  const randseed = new Array(4); // Xorshift: [x, y, z, w] 32 bit values\n\n  function seedrand(seed: string): void {\n    for (let i = 0; i < randseed.length; i++) {\n      randseed[i] = 0;\n    }\n    for (let i = 0; i < seed.length; i++) {\n      randseed[i % 4] = (randseed[i % 4] << 5) - randseed[i % 4] + seed.charCodeAt(i);\n    }\n  }\n\n  function rand(): number {\n    // based on Java's String.hashCode(), expanded to 4 32bit values\n    const t = randseed[0] ^ (randseed[0] << 11);\n\n    randseed[0] = randseed[1];\n    randseed[1] = randseed[2];\n    randseed[2] = randseed[3];\n    randseed[3] = randseed[3] ^ (randseed[3] >> 19) ^ t ^ (t >> 8);\n\n    return (randseed[3] >>> 0) / ((1 << 31) >>> 0);\n  }\n\n  function createColor(): string {\n    // saturation is the whole color spectrum\n    const h = Math.floor(rand() * 360);\n    // saturation goes from 40 to 100, it avoids greyish colors\n    const s = rand() * 60 + 40 + '%';\n    // lightness can be anything from 0 to 100, but probabilities are a bell curve around 50%\n    const l = (rand() + rand() + rand() + rand()) * 25 + '%';\n\n    const color = 'hsl(' + h + ',' + s + ',' + l + ')';\n    return color;\n  }\n\n  function createImageData(size: number): number[] {\n    const width = size; // Only support square icons for now\n    const height = size;\n\n    const dataWidth = Math.ceil(width / 2);\n    const mirrorWidth = width - dataWidth;\n\n    const data = [];\n    for (let y = 0; y < height; y++) {\n      let row = [];\n      for (let x = 0; x < dataWidth; x++) {\n        // this makes foreground and background color to have a 43% (1/2.3) probability\n        // spot color has 13% chance\n        row[x] = Math.floor(rand() * 2.3);\n      }\n      const r = row.slice(0, mirrorWidth);\n      r.reverse();\n      row = row.concat(r);\n\n      for (let i = 0; i < row.length; i++) {\n        data.push(row[i]);\n      }\n    }\n\n    return data;\n  }\n\n  function setCanvas(\n    canvas: HTMLCanvasElement,\n    imageData: number[],\n    color: string,\n    scale: number,\n    bgcolor: string,\n    spotcolor: string\n  ) {\n    const width = Math.sqrt(imageData.length);\n    const size = width * scale;\n\n    canvas.width = size;\n    canvas.height = size;\n\n    const cc = canvas.getContext('2d');\n    if (cc) {\n      cc.fillStyle = bgcolor;\n      cc.fillRect(0, 0, canvas.width, canvas.height);\n      cc.fillStyle = color;\n\n      for (let i = 0; i < imageData.length; i++) {\n        // if data is 2, choose spot color, if 1 choose foreground\n        cc.fillStyle = imageData[i] === 1 ? color : spotcolor;\n\n        // if data is 0, leave the background\n        if (imageData[i]) {\n          const row = Math.floor(i / width);\n          const col = i % width;\n\n          cc.fillRect(col * scale, row * scale, scale, scale);\n        }\n      }\n    } else {\n      console.error(`could not create 2d context for Blockie canvas`);\n    }\n  }\n\n  function update() {\n    if (lastOptions && lastOptions.address === address && lastOptions.scale === scale) {\n      return;\n    }\n    lastOptions = {\n      address,\n      scale,\n    };\n\n    seedrand((address && address.toLowerCase()) || '0x0000000000000000000000000000000000000000');\n    const color = createColor();\n    const bgcolor = createColor();\n    const spotcolor = createColor();\n    const imageData = createImageData(8);\n    setCanvas(canvas, imageData, color, scale, bgcolor, spotcolor);\n  }\n\n  afterUpdate(update);\n</script>\n\n<canvas class={_class} bind:this={canvas} />\n\n<style>\n  canvas {\n    image-rendering: -moz-crisp-edges;\n    image-rendering: -webkit-crisp-edges;\n    image-rendering: pixelated;\n    image-rendering: crisp-edges;\n  }\n</style>\n"],"names":[],"mappings":"wQA0Ie,kCAAf,6CAAe,wFAxDX,EACA,EACA,EACA,EACA,EACA,QAEM,GAAQ,KAAK,KAAK,EAAU,QAC5B,EAAO,EAAQ,EAErB,EAAO,MAAQ,EACf,EAAO,OAAS,OAEV,GAAK,EAAO,WAAW,SACzB,GACF,EAAG,UAAY,EACf,EAAG,SAAS,EAAG,EAAG,EAAO,MAAO,EAAO,QACvC,EAAG,UAAY,SAEN,GAAI,EAAG,EAAI,EAAU,OAAQ,OAEpC,EAAG,UAAY,EAAU,KAAO,EAAI,EAAQ,EAGxC,EAAU,SACN,GAAM,KAAK,MAAM,EAAI,GACrB,EAAM,EAAI,EAEhB,EAAG,SAAS,EAAM,EAAO,EAAM,EAAO,EAAO,QAIjD,SAAQ,oFA9GD,EAAS,OAET,cACA,QAAQ,KAEf,EAOA,OAGE,MAAe,OAAM,cAET,UACP,GAAI,EAAG,EAAI,EAAS,OAAQ,IACnC,EAAS,GAAK,SAEP,GAAI,EAAG,EAAI,EAAK,OAAQ,IAC/B,EAAS,EAAI,GAAM,GAAS,EAAI,IAAM,GAAK,EAAS,EAAI,GAAK,EAAK,WAAW,qBAMzE,GAAI,EAAS,GAAM,EAAS,IAAM,GAExC,SAAS,GAAK,EAAS,GACvB,EAAS,GAAK,EAAS,GACvB,EAAS,GAAK,EAAS,GACvB,EAAS,GAAK,EAAS,GAAM,EAAS,IAAM,GAAM,EAAK,GAAK,EAEpD,GAAS,KAAO,GAAO,IAAK,KAAQ,qBAKtC,GAAI,KAAK,MAAM,IAAS,KAExB,EAAI,IAAS,GAAK,GAAK,IAEvB,EAAK,KAAS,IAAS,IAAS,KAAU,GAAK,UAEvC,OAAS,EAAI,IAAM,EAAI,IAAM,EAAI,eAIxB,QACjB,GAAQ,EACR,EAAS,EAET,EAAY,KAAK,KAAK,EAAQ,GAC9B,EAAc,EAAQ,EAEtB,YACG,GAAI,EAAG,EAAI,EAAQ,QACtB,aACK,GAAI,EAAG,EAAI,EAAW,IAG7B,EAAI,GAAK,KAAK,MAAM,IAAS,UAEzB,GAAI,EAAI,MAAM,EAAG,GACvB,EAAE,UACF,EAAM,EAAI,OAAO,UAER,GAAI,EAAG,EAAI,EAAI,OAAQ,IAC9B,EAAK,KAAK,EAAI,UAIX,mBAyCH,GAAe,EAAY,UAAY,GAAW,EAAY,QAAU,SAG5E,GACE,UACA,SAGF,EAAU,GAAW,EAAQ,eAAkB,mDACzC,GAAQ,IACR,EAAU,IACV,EAAY,IACZ,EAAY,EAAgB,GAClC,EAAU,EAAQ,EAAW,EAAO,EAAO,EAAS,GAGtD,EAAY,4CAGoB"}